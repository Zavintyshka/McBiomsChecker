from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from db_funcs import maps_db, admin_db, user_db
from keyboardbuilder import make_reg_inline_keyboard, make_map_list_keyboard, make_advancement_list_keyboard, \
    first_map_keyboard
from logger import db_logger

__all__ = ['registrate_message_handlers']


async def new_user(msg: Message):
    tg_id = msg.from_user.id
    if user_db.is_user_exists(tg_id):
        await msg.answer('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. If know want to change language use /change_language command.')
    else:
        await msg.answer(
            '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ adventuring time.')
        await msg.answer_animation('CgACAgIAAxkBAAIEImWlDVVMAc7p_YX5YuESYKSRwWB_AAK9QAACEzooSVjNCvuQxg3JNAQ')
        builder = make_reg_inline_keyboard()
        await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫', reply_markup=builder.as_markup())


async def help_command(msg: Message):
    message = r"""–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è <b>Adventuring Time</b>
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à—É –∫–∞—Ä—Ç—É –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.
–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
ü™üWindows: C:\Users\*–ò–º—è_—É—á–µ—Ç–Ω–æ–π_–∑–∞–ø–∏—Å–∏*\Appdata\Roaming\.minecraft\saves
üçémacOS: /Users/*–ò–º—è_—É—á–µ—Ç–Ω–æ–π_–∑–∞–ø–∏—Å–∏*/Library/Application Support/minecraft/saves
–ó–∞—Ç–µ–º –≤ –ø–∞–ø–∫–µ saves –≤—ã —É–≤–∏–¥–µ—Ç–µ –ø–∞–ø–∫—É advancements, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç json-—Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
–≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∏–Ω—É—Ç—å –±–æ—Ç—É –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /add_map
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫–∏–µ –±–∏–æ–º—ã –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏, –∞ –∫–∞–∫–∏–µ –≤—ã —É–∂–µ –Ω–∞—à–ª–∏ üòÉ.
    """
    await msg.answer(message)


async def map_list(msg: Message):
    tg_id = msg.from_user.id
    response = maps_db.get_map_list(tg_id)
    db_logger.info(f'Receiving map list for user: id ={tg_id}')

    if not response:
        builder = first_map_keyboard()
        await msg.answer('–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç üòú.\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.',
                         reply_markup=builder.as_markup())
    else:
        builder = make_map_list_keyboard(response, 'map-list')
        await msg.answer('–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç:', reply_markup=builder.as_markup())


async def delete_map_menu(msg: Message):
    tg_id = msg.from_user.id
    maps = maps_db.get_map_list(tg_id)
    if maps:
        builder = make_map_list_keyboard(maps, 'delete-map')
        await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup=builder.as_markup())
    else:
        await msg.answer('–ü–æ—Ö–æ–∂–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')


async def delete_advancement(msg: Message):
    if admin_db.is_admin(msg.from_user.id):
        records = admin_db.get_all_records()
        builder = make_advancement_list_keyboard(records)
        # TODO —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
        await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –≤–µ—Ä—Å–∏—é –∏–≥—Ä—ã, —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω', reply_markup=builder.as_markup())
    else:
        await msg.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.')


translate = {'RU': "–≠—Ç–æ —ç—Ö–æ —Ñ—É–Ω–∫—Ü–∏—è", 'EN': "It's an echo function"}


async def echo_func(msg: Message, some_list: list[int]):
    some_list.append(1)
    await msg.answer(str(some_list))


async def change_language(msg: Message):
    builder = make_reg_inline_keyboard()
    await msg.answer('Choose language', reply_markup=builder.as_markup())


def registrate_message_handlers(dp: Dispatcher):
    dp.message.register(new_user, Command(commands='start'))
    dp.message.register(change_language, Command(commands='change_language'))
    dp.message.register(echo_func, Command(commands='black'))
    dp.message.register(help_command, Command(commands='help'))
    dp.message.register(map_list, Command(commands='map_list'))
    dp.message.register(delete_map_menu, Command(commands=['delete_map', 'del_map']))
    dp.message.register(delete_advancement, Command(commands=['delete_advancement', 'del_advancement']))
